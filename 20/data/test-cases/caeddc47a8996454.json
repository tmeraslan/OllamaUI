{"uid":"caeddc47a8996454","name":"test_sent_message","fullName":"tests.test_example.ExampleTestCase#test_sent_message","historyId":"2450dc0d2016c9272d93de1a912d07c9","time":{"start":1755689843796,"stop":1755689844919,"duration":1123},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: binary is not a Firefox executable","statusTrace":"self = <tests.test_example.ExampleTestCase testMethod=test_sent_message>\n\n    def setUp(self):\n>       self.driver = get_driver()   # ← שימוש ב-DriverFactory דרך get_driver\n                      ^^^^^^^^^^^^\n\ntests/test_example.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ndrivers/driver_factory.py:47: in get_driver\n    return factory.create_driver()\n           ^^^^^^^^^^^^^^^^^^^^^^^\ndrivers/driver_factory.py:17: in create_driver\n    return self._create_firefox_driver()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ndrivers/driver_factory.py:40: in _create_firefox_driver\n    driver = webdriver.Firefox(options=options)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/firefox/webdriver.py:72: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:263: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:366: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f23f71dfc90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"binary is not a Firefox executable\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: binary is not a Firefox executable\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidArgumentException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":true,"beforeStages":[{"name":"_unittest_setUpClass_fixture_ExampleTestCase","time":{"start":1755689843796,"stop":1755689843796,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"_unittest_setUpClass_fixture_ExampleTestCase::0","time":{"start":1755689844976,"stop":1755689844976,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_example"},{"name":"subSuite","value":"ExampleTestCase"},{"name":"host","value":"pkrvmubgrv54qmi"},{"name":"thread","value":"4478-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_example"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f1bdae4f82186bc9","status":"broken","statusDetails":"selenium.common.exceptions.InvalidArgumentException: Message: binary is not a Firefox executable","time":{"start":1755689837250,"stop":1755689838404,"duration":1154}},{"uid":"30173ef2bc9ad2ab","status":"broken","statusDetails":"selenium.common.exceptions.InvalidArgumentException: Message: binary is not a Firefox executable","time":{"start":1755689829580,"stop":1755689830758,"duration":1178}},{"uid":"64240943e38ebb8a","status":"passed","time":{"start":1755689642700,"stop":1755689675938,"duration":33238}},{"uid":"cdfb6184caa4f5c5","status":"passed","time":{"start":1755689636695,"stop":1755689645611,"duration":8916}},{"uid":"77145ef44ad14256","status":"passed","time":{"start":1755689633098,"stop":1755689641807,"duration":8709}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"caeddc47a8996454.json","parameterValues":[]}